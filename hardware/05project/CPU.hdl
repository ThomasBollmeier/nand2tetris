// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // Instruction
    // 0aaa_aaaa_aaaa_aaaa -> address instruction
    // 1xxaccccccdddjjj 
    // FEDCBA9876543210
    PARTS:
	
    Mux16(a=instruction, b=aluOut, 
        sel=instruction[15], out=out1);

    Not(in=instruction[15], out=isAddrInstr);
    Or(a=isAddrInstr, b=instruction[5], out=loadAReg);
    ARegister(in=out1, load=loadAReg, 
        out=aRegOut, out[0..14]=addressM);
    
    Mux16(a=aRegOut, b=inM, 
        sel=instruction[12], out=out2);

    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=aluOut, load=loadDReg, out=dRegOut);

    ALU(x=dRegOut , y=out2, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=aluOut, out=outM,
        zr=isZero , ng=isNeg);

    Not(in=isZero, out=isNotZero);
    Not(in=isNeg, out=isNotNeg);

    And(a=instruction[15], b=instruction[3], out=writeM);

    PC(in=aRegOut, 
        load=loadPc, inc=incrPc, 
        reset=reset, out[0..14]=pc);

    DMux8Way(in=true, 
        sel=instruction[0..2], 
        a=noj, b=jgt, 
        c=jeq , d=jge, 
        e=jlt, f=jne, 
        g=jle, h=jmp);

    And(a=isNotZero, b=isNotNeg, out=isGt);
    Or(a=isZero, b=isGt, out=isGe);
    Or(a=isZero, b=isNeg, out=isLe);

    And(a=jgt, b=isGt, out=loadGt);
    And(a=jeq, b=isZero, out=loadEq);
    And(a=jge, b=isGe, out=loadGe);
    And(a=jlt, b=isNeg, out=loadLt);
    And(a=jne, b=isNotZero, out=loadNe);
    And(a=jle, b=isLe, out=loadLe);
    
    Or8Way(
        in[0]=false,
        in[1]=loadGt,
        in[2]=loadEq,
        in[3]=loadGe,
        in[4]=loadLt,
        in[5]=loadNe,
        in[6]=loadLe,
        in[7]=jmp,
        out=loadTmp);
    And(a=loadTmp, b=instruction[15], out=loadPc);
    Not(in=loadPc, out=incrPc);
}